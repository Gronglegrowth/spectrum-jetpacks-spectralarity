plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

version = project.mod_version
group = project.maven_group

repositories {
	// Spectrum Repos
	mavenCentral()
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://maven.terraformersmc.com/" } // Modmenu, EMI, Trinkets
	maven { url = "https://maven.nucleoid.xyz/" } // Common Protection API
	maven { url = "https://maven.blamejared.com" } // Patchouli
	maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components API
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release/" } // Entity Reach Attribute
	maven { url = "https://api.modrinth.com/maven" } // Revelationary, Additional Entity Attributes, Fractal Lib, Colorful Hearts
	maven { url = "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/" } // Modonomicon
	maven { url = "https://jitpack.io" } // Spectrum, Arrowhead, Dimensional Reverb, Step Height Entity Attribute
}

dependencies {
	// Minecraft + fabric
	minecraft ("com.mojang:minecraft:${project.minecraft_version}")
	mappings ("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation ("net.fabricmc:fabric-loader:${project.loader_version}")
	// FAPI
	modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	// Spectrum
	modImplementation ("maven.modrinth:Spectrum:${project.spectrum_version}")
	modImplementation ("maven.modrinth:revelationary:${project.revelationary_version}")
	modImplementation ("maven.modrinth:AdditionalEntityAttributes:${project.aea_version}")
	modImplementation ("com.github.DaFuqs:Arrowhead:${project.arrowhead_version}")
	modImplementation ("maven.modrinth:fractal-lib:${project.fractal_version}")
	modImplementation ("com.github.DaFuqs:DimensionalReverb:${project.dimensional_reverb_version}")
	modImplementation ("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
	modImplementation ("com.github.emilyploszaj:step-height-entity-attribute:${project.step_height_attribute_version}")
	modImplementation ("com.github.Noaaan:Matchbooks:${project.matchbooks_version}")
	modImplementation ("com.klikli_dev:modonomicon-${project.minecraft_version}-fabric:${project.modonomicon_version}") { exclude(group: "com.klikli_dev") }

	// Trinkets
	modImplementation ("dev.emi:trinkets:${project.trinkets_version}")
	project.cca_modules.split(",").each{module -> modImplementation ("dev.onyxstudios.cardinal-components-api:cardinal-components-$module:${project.cca_version}")}

	// Config
	modApi ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
	modApi ("com.terraformersmc:modmenu:${project.modmenu_version}")

	// Item viewer
	switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
		case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
		case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
		case "disabled": break
		default: println("Unknown recipe viewer specified: $recipe_viewer. Must be EMI, REI or disabled.")
	}
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"minecraft_version": project.minecraft_version,
				"loader_version": project.loader_version
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

loom {
	runs {
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"

			runDir "build/datagen"
		}
	}
	runs {
		mixinDebug {
			inherit client
			name "Mixin Debug"
			vmArg("-Dmixin.debug.export=true")
		}
	}
}

// Add the generated sources to the fabric resources
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

publishMods {
	changelog = file("CHANGELOG.md").text.replace("@VERSION@", project.mod_version)
	type = STABLE

	curseforge("curseforge") {
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add("1.20.1")
		projectId = "824498"
		modLoaders.add("fabric")
		modLoaders.add("quilt")
		file = remapJar.archiveFile
		displayName = "Spectrum Jetpacks ${project.mod_version}"
		version = "${project.mod_version}"
		requires {
			slug = "spectrum"
		}
	}

	modrinth("modrinth") {
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		projectId = "iXT7GFmP"
		minecraftVersions.add("1.20.1")
		modLoaders.add("fabric")
		modLoaders.add("quilt")
		file = remapJar.archiveFile
		displayName = "Spectrum Jetpacks ${project.mod_version}"
		version = "${project.mod_version}"
		requires {
			slug = "spectrum"
		}
	}
}